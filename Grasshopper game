<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"/>
  <title>Grasshopper Jump</title>
  <style>
    :root{
      --bg1:#a8e6cf; --bg2:#dcedc1; --grass:#388e3c; --dark:#263238; --log:#6d4c41;
    }
    html,body{height:100%;margin:0;font-family:Inter, Arial, sans-serif;-webkit-tap-highlight-color:transparent;}
    body{background:linear-gradient(var(--bg1),var(--bg2));display:flex;align-items:center;justify-content:center;}
    #gameWrap{position:relative;width:100%;max-width:900px;height:540px;background:transparent;box-shadow:0 10px 30px rgba(0,0,0,.12);border-radius:12px;overflow:hidden;}
    canvas{display:block;width:100%;height:100%;}
    .ui{position:absolute;left:12px;top:12px;color:var(--dark);font-weight:700;font-size:18px;user-select:none}
    .ui.right{left:auto;right:12px}
    #controls{position:absolute;bottom:18px;left:50%;transform:translateX(-50%);display:flex;gap:8px}
    button{background:#fff;border-radius:999px;padding:10px 14px;border:0;box-shadow:0 6px 14px rgba(0,0,0,.12);font-weight:700}
    #startScreen{position:absolute;inset:0;display:flex;align-items:center;justify-content:center;flex-direction:column;gap:14px;background:linear-gradient(rgba(255,255,255,.6), rgba(255,255,255,.2));backdrop-filter:blur(2px)}
    #startScreen h1{margin:0;font-size:28px;color:var(--dark)}
    #hint{font-size:14px;color:#37474f}
    #gameOver{position:absolute;inset:0;display:none;align-items:center;justify-content:center;flex-direction:column;gap:10px;background:linear-gradient(rgba(0,0,0,.15),rgba(0,0,0,.05))}
    .small{font-size:13px;color:#37474f}
    @media (max-width:420px){ #gameWrap{height:72vh;border-radius:0} }
  </style>
</head>
<body>
  <div id="gameWrap">
    <canvas id="c"></canvas>
    <div class="ui" id="scoreLabel">Score: 0</div>
    <div class="ui right" id="bestLabel">Best: 0</div>

    <div id="controls">
      <button id="fullscreenBtn">Fullscreen</button>
      <button id="muteBtn">Mute</button>
    </div>

    <div id="startScreen">
      <h1>Grasshopper Jump</h1>
      <div id="hint">Tap anywhere to jump â€” avoid the logs!</div>
      <div style="display:flex;gap:10px;margin-top:8px;">
        <button id="startBtn">Start</button>
        <button id="howBtn">How to</button>
      </div>
      <div class="small">Tap the screen to jump. Survive as long as you can.</div>
    </div>

    <div id="gameOver">
      <h2 id="goText">Game Over</h2>
      <div class="small" id="finalScore">Score: 0</div>
      <button id="restartBtn">Restart</button>
    </div>
  </div>

<script>
(() => {
  const canvas = document.getElementById('c');
  const ctx = canvas.getContext('2d');
  const wrap = document.getElementById('gameWrap');
  const scoreLabel = document.getElementById('scoreLabel');
  const bestLabel = document.getElementById('bestLabel');
  const startScreen = document.getElementById('startScreen');
  const gameOverScreen = document.getElementById('gameOver');
  const finalScore = document.getElementById('finalScore');
  const startBtn = document.getElementById('startBtn');
  const restartBtn = document.getElementById('restartBtn');
  const howBtn = document.getElementById('howBtn');
  const fullscreenBtn = document.getElementById('fullscreenBtn');
  const muteBtn = document.getElementById('muteBtn');

  let dpr = Math.max(1, window.devicePixelRatio || 1);
  function resize() {
    canvas.width = wrap.clientWidth * dpr;
    canvas.height = wrap.clientHeight * dpr;
    canvas.style.width = wrap.clientWidth + 'px';
    canvas.style.height = wrap.clientHeight + 'px';
    ctx.setTransform(dpr,0,0,dpr,0,0);
  }
  window.addEventListener('resize', resize);
  resize();

  // Game vars
  let gravity = 0.6, baseJump = 12;
  let player, obstacles, spawnTimer, score, gameSpeed, running, highScore;
  let muted = false;

  // load high score
  highScore = parseInt(localStorage.getItem('grasshopper_best') || '0', 10);
  bestLabel.innerText = 'Best: ' + highScore;

  // Simple sounds (WebAudio)
  let audioCtx, jumpBuff, hitBuff;
  function initAudio(){
    try{
      audioCtx = new (window.AudioContext || window.webkitAudioContext)();
      // minimal beeps with Oscillator
      jump = (t=0.06, f=600) => {
        if(muted) return;
        const o = audioCtx.createOscillator();
        const g = audioCtx.createGain();
        o.type='sine'; o.frequency.value=f;
        g.gain.value = 0.08;
        o.connect(g); g.connect(audioCtx.destination);
        o.start(); g.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + t);
        setTimeout(()=>o.stop(), t*1000 + 20);
      };
      hit = ()=>{ if(muted) return; const o = audioCtx.createOscillator(); const g = audioCtx.createGain(); o.type='triangle'; o.frequency.value=120; g.gain.value=0.12; o.connect(g); g.connect(audioCtx.destination); o.start(); g.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.18); setTimeout(()=>o.stop(),200); };
    }catch(e){ /* no audio */ }
  }
  initAudio();

  class Grasshopper {
    constructor(){
      this.w = 48; this.h = 36;
      this.x = 64; this.y = (wrap.clientHeight - this.h - 56);
      this.vy = 0; this.grounded=true;
      this.jumpForce = baseJump;
    }
    jump(){
      if(this.grounded){
        this.vy = -this.jumpForce;
        this.grounded = false;
        if(typeof jump==='function') jump();
      }
    }
    update(){
      this.vy += gravity;
      this.y += this.vy;
      const ground = wrap.clientHeight - this.h - 56;
      if(this.y >= ground){ this.y = ground; this.vy = 0; this.grounded = true; }
    }
    draw(ctx){
      // body ellipse
      ctx.fillStyle = '#388e3c';
      ctx.beginPath();
      ctx.ellipse(this.x + this.w*0.5, this.y + this.h*0.55, this.w*0.5, this.h*0.45, 0, 0, Math.PI*2);
      ctx.fill();
      // head / eye
      ctx.fillStyle = '#2e7d32';
      ctx.beginPath();
      ctx.arc(this.x + this.w*0.78, this.y + this.h*0.22, 6, 0, Math.PI*2);
      ctx.fill();
      ctx.fillStyle='#000';
      ctx.beginPath();
      ctx.arc(this.x + this.w*0.82, this.y + this.h*0.22, 2.4, 0, Math.PI*2);
      ctx.fill();
      // simple legs (stylized)
      ctx.strokeStyle = '#2e7d32'; ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(this.x + 10, this.y + this.h - 2);
      ctx.lineTo(this.x - 6, this.y + this.h + 12);
      ctx.moveTo(this.x + 22, this.y + this.h - 2);
      ctx.lineTo(this.x + 8, this.y + this.h + 12);
      ctx.stroke();
    }
  }

  class Obstacle {
    constructor(speed){
      this.w = 16 + Math.random()*28;
      this.h = 22 + Math.random()*64;
      this.x = wrap.clientWidth + (Math.random()*120);
      this.y = wrap.clientHeight - this.h - 56;
      this.speed = speed;
      this.passed = false;
    }
    update(){ this.x -= this.speed; }
    draw(ctx){
      ctx.fillStyle = '#6d4c41';
      ctx.fillRect(this.x, this.y, this.w, this.h);
      // a little bark
      ctx.fillStyle = '#5d3f36';
      ctx.fillRect(this.x+4, this.y+6, Math.min(10,this.w-8), 3);
    }
  }

  function reset(){
    player = new Grasshopper();
    obstacles = [];
    spawnTimer = 0;
    score = 0;
    gameSpeed = 6;
    running = false;
    scoreLabel.innerText = 'Score: 0';
    gameOverScreen.style.display = 'none';
  }
  reset();

  function spawn(){
    obstacles.push(new Obstacle(gameSpeed));
  }

  // touch/click to jump
  function userJump(){
    if(!running) return;
    player.jump();
  }

  // Game loop
  let last = performance.now();
  function loop(t){
    const dt = (t - last) / 1000;
    last = t;
    // clear
    ctx.clearRect(0,0,canvas.width,canvas.height);
    // background simple ground
    ctx.fillStyle = '#98d8a3';
    ctx.fillRect(0, wrap.clientHeight - 56, wrap.clientWidth, 56);

    // update
    player.update();
    // spawn logic (shorter spawn as speed grows)
    spawnTimer += dt * 60;
    const spawnGap = Math.max(48 - Math.floor(gameSpeed), 22);
    if(spawnTimer > spawnGap){
      spawn(); spawnTimer = 0;
    }

    for(let i = obstacles.length -1; i>=0; i--){
      const o = obstacles[i];
      // adjust speed to current
      o.speed = gameSpeed;
      o.update();
      o.draw(ctx);
      // passed?
      if(!o.passed && o.x + o.w < player.x){
        o.passed = true;
        score++;
        scoreLabel.innerText = 'Score: ' + score;
        // speed up every 6 points slightly
        if(score % 6 === 0) gameSpeed += 0.5;
      }
      // remove off-screen
      if(o.x + o.w < -20) obstacles.splice(i,1);
      // collision check (AABB)
      if(player.x < o.x + o.w &&
         player.x + player.w > o.x &&
         player.y < o.y + o.h &&
         player.y + player.h > o.y){
        // hit
        running = false;
        if(typeof hit==='function') hit();
        endGame();
      }
    }

    // draw player
    player.draw(ctx);

    // loop if running
    if(running) requestAnimationFrame(loop);
  }

  // start game
  function startGame(){
    startScreen.style.display = 'none';
    reset();
    running = true;
    last = performance.now();
    requestAnimationFrame(loop);
    // kickstart audio context on mobile (resume)
    if(audioCtx && audioCtx.state === 'suspended') audioCtx.resume();
  }

  function endGame(){
    finalScore.innerText = 'Score: ' + score;
    gameOverScreen.style.display = 'flex';
    // save best
    if(score > highScore){
      highScore = score;
      localStorage.setItem('grasshopper_best', String(highScore));
      bestLabel.innerText = 'Best: ' + highScore;
      document.getElementById('goText').innerText = 'New Best!';
    } else {
      document.getElementById('goText').innerText = 'Game Over';
    }
  }

  // UI handlers
  startBtn.addEventListener('click', startGame);
  restartBtn.addEventListener('click', () => { startScreen.style.display='none'; gameOverScreen.style.display='none'; startGame(); });
  howBtn.addEventListener('click', ()=> { alert('Tap the screen to jump. Avoid hitting logs. Use Fullscreen for best experience.'); });

  // Fullscreen
  fullscreenBtn.addEventListener('click', async () => {
    try {
      if(!document.fullscreenElement) await wrap.requestFullscreen();
      else await document.exitFullscreen();
    }catch(e){}
  });

  muteBtn.addEventListener('click', ()=> { muted = !muted; muteBtn.innerText = muted ? 'Unmute' : 'Mute'; });

  // input listeners
  // single tap or click -> jump (or start if not started)
  function onTap(e){
    e.preventDefault();
    if(!running){
      // if start screen visible -> start game
      if(startScreen.style.display !== 'none'){ startGame(); return; }
      // if game over -> restart
      if(gameOverScreen.style.display !== 'none'){ restartBtn.click(); return; }
    }
    userJump();
  }
  // attach to both canvas and wrapper
  ['touchstart','mousedown'].forEach(ev => {
    wrap.addEventListener(ev, onTap, {passive:false});
  });

  // keyboard support (spacebar)
  window.addEventListener('keydown', (e)=>{ if(e.code === 'Space'){ e.preventDefault(); if(!running){ startGame(); } else userJump(); } });

  // pause when tab hidden
  document.addEventListener('visibilitychange', ()=> {
    if(document.hidden && running){ running = false; gameOverScreen.style.display='flex'; finalScore.innerText = 'Paused â€” Score: ' + score; }
  });

  // initial draw
  (function preDraw(){
    ctx.clearRect(0,0,canvas.width,canvas.height);
    // ground
    ctx.fillStyle = '#98d8a3';
    ctx.fillRect(0, wrap.clientHeight - 56, wrap.clientWidth, 56);
    // simple grasshopper
    const ph = new Grasshopper();
    ph.x = wrap.clientWidth/2 - ph.w/2;
    ph.y = wrap.clientHeight/2 - ph.h/2;
    ph.draw(ctx);
  })();

})();
</script>
</body>
</html>
